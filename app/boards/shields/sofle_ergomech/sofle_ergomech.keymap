/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1000  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 500    // default: 10

#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define GAMING 1
#define LOWER 2
#define RAISE 3
#define ADJUST 4
#define WLAYER 5
#define ELAYER 6
#define NLAYER 7
#define MACRO 8

// Caps Word
&caps_word {
    continue-list = <UNDERSCORE MINUS LS(SLASH) BACKSPACE>;
};

// Layer Tap
&lt {
    quick-tap-ms = <200>;
    tapping-term-ms = <200>;
};

// Sticky key
&sk {
    release-after-ms = <2000>;
    quick-release;
    /delete-property/ ignore-modifiers;
};

// Mouse Movement
&mmv {
    x-input-code = <INPUT_REL_X>;
    y-input-code = <INPUT_REL_Y>;
    time-to-max-speed-ms = <200>;
    acceleration-exponent = <1>;
};

// Mouse Scroll
&msc {
    x-input-code = <INPUT_REL_HWHEEL>;
    y-input-code = <INPUT_REL_WHEEL>;
    time-to-max-speed-ms = <1000>;
    acceleration-exponent = <2>;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_rename {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp F2>;
        };

        combo_m {
            timeout-ms = <25>;
            key-positions = <15 16>;
            bindings = <&kp M>;
            layers = <0 2 3 4 5 6>;  
        };

        combo_off {
            timeout-ms = <25>;
            key-positions = <0 11>;
            bindings = <&kp C_POWER>;
        };

        combo_o {
            timeout-ms = <50>;
            key-positions = <26 28>;
            bindings = <&kp O>;
            layers = <0 2 3 4 5 6>;  
        };

        combo_i {
            timeout-ms = <50>;
            key-positions = <26 27 28>;
            bindings = <&kp I>;
            layers = <0 2 3 4 5 6>;  
        };

        combo_task {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&kp LC(LS(ESC))>;
        };
        
        combo_f10 {
            timeout-ms = <50>;
            key-positions = <3 4 5>;
            bindings = <&kp F10>;
        };

        combo_sound {
            timeout-ms = <50>;
            key-positions = <25 29>;
            bindings = <&kp LG(A)>;
        };
        
        combo_lock {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp LG(L)>;
        };

        combo_ctrl_t {
            timeout-ms = <50>;
            key-positions = <17 53>;
            bindings = <&kp LC(T)>;
        };

        combo_win_e {
            timeout-ms = <50>;
            key-positions = <15 53>;
            bindings = <&kp LG(E)>;
            layers = <0 2 3 4 5 6>;  
        };

        combo_esc {
            timeout-ms = <50>;
            key-positions = <15 26 28>;
            bindings = <&kp F5>;
            layers = <0 2 3 4 5 6>;  
        };

        combo_we {
            timeout-ms = <30>;
            key-positions = <14 15>;
            bindings = <&kp ESC>;
            layers = <0 2 3 4 5 6>; 
        };

        combo_al {
            timeout-ms = <30>;
            key-positions = <25 33>;
            bindings = <&caps_word>;
        };

        combo_wk {
            timeout-ms = <50>;
            key-positions = <14 32>;
            bindings = <&kp TAB>;
        };

        combo_wl {
            timeout-ms = <50>;
            key-positions = <14 33>;
            bindings = <&kp CAPS>; 
        };

        combo_45 {
            timeout-ms = <50>;
            key-positions = <4 5>;
            bindings = <&kp LC(LS(ESC))>;
        };

        combo_f24 {
            timeout-ms = <50>;
            key-positions = <14 15 16>;
            bindings = <&kp F24>;
        };

        combo_sticky {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&sl MACRO>;
        };

        combo_prscrn {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp PSCRN>;
        };

    };
};

/ {
    macros {
        m_speed1: m_speed1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <200>;
            tap-ms = <20>;
            bindings
                = <&macro_tap &kp LS(R)>
                ,<&macro_wait_time 20>
                ,<&macro_tap &kp KP_N2 &kp KP_N0 &kp KP_N0>
                ,<&macro_wait_time 20>
                ,<&macro_tap &kp ENTER>
                ,<&macro_wait_time 20>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ;
        };
            m_speed2: m_speed2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <200>;
            tap-ms = <20>;
            bindings
                = <&macro_tap &kp LS(R)>
                ,<&macro_wait_time 20>
                ,<&macro_tap &kp KP_N4 &kp KP_N0 &kp KP_N0>
                ,<&macro_wait_time 20>
                ,<&macro_tap &kp ENTER>
                ,<&macro_wait_time 20>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ;
        };
            m_speed3: m_speed3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <200>;
            tap-ms = <20>;
            bindings
                = <&macro_tap &kp LS(R)>
                ,<&macro_wait_time 20>
                ,<&macro_tap &kp KP_N8 &kp KP_N0 &kp KP_N0>
                ,<&macro_wait_time 20>
                ,<&macro_tap &kp ENTER>
                ,<&macro_wait_time 20>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ;
        };
            m_del5: m_del5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <20>;
            tap-ms = <20>;
            bindings
                = 
                <&macro_tap &kp LS(LC(LA(L)))>
                ,<&macro_tap &kp RIGHT>
                ,<&macro_tap &kp RIGHT>
                ,<&macro_tap &kp RIGHT>
                ,<&macro_tap &kp RIGHT>
                ,<&macro_tap &kp RIGHT>
                ,<&macro_tap &kp Q>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp SPACE>
                ;
        };
            m_mute: m_mute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <20>;
            tap-ms = <20>;
            bindings
                = 
                <&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ;
        };
            caret: caret {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <1>;
            tap-ms = <1>;
            bindings
            = <&macro_press &kp LALT>
            , <&macro_tap &kp KP_N9 &kp KP_N4>
            , <&macro_release &kp LALT>
            ;

        };

            buildl: buildl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_tap &kp LS(LC(LA(LEFT)))>
            , <&macro_tap &bootloader>
            ;

        };

            buildr: buildr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <100>;
            tap-ms = <100>;
            bindings
            = <&macro_tap &kp LS(LC(LA(RIGHT)))>
            ;

        };
            cstest: cstest {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = 
                <&macro_tap &kp N1>
                ,<&macro_tap &kp DOT &kp B &kp K &kp K &kp ENTER>
                ,<&macro_tap &kp DOT &kp F &kp T &kp M &kp ENTER>
                ,<&macro_tap &kp DOT &kp M &kp P &kp I &kp ENTER>
                 ;
        };


    };
};

/ {
    

    behaviors {
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;    // <---[[moderate duration]]
            quick-tap-ms = <200>;
            //require-prior-idle-ms = <125>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-while-undecided;
        };
    };

        behaviors {
        ebhm: enhanced_balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;    // <---[[moderate duration]]
            quick-tap-ms = <200>;
            //require-prior-idle-ms = <125>;
            flavor = "balanced";
            bindings = <&kp>, <&sl>;
            hold-while-undecided;
        };
    };

    behaviors {
        lkp: layer_keypress {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
    };

    behaviors {
        lshift: lshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <400>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&sk>;
        };
    };
    
    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp KP_MULTIPLY>, <&kp KP_DIVIDE>;
        };
    };

    behaviors {
        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp KP_MINUS>, <&kp KP_PLUS>; 
        };
    };

    behaviors {
        quotation: quotation {
            compatible = "zmk,behavior-mod-morph"; 
            #binding-cells = <0>;
            bindings = <&kp LS(BSLH)>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };
    };

    behaviors {
        bspc_hacek: backspace_hacek {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ENTER>, <&kp EQUAL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };
    };

    behaviors {
        u_exclam: u_exclam {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SEMI>, <&kp SQT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };
    };
    
    behaviors {
        ctrl_z: ctrl_z {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp Z>, <&kp Y>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
        };
    }; 

    behaviors {
        ctrl_c: ctrl_c {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&lkp LOWER SPACE>, <&kp C>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
        };
    };

    behaviors {
        bspc_del: bspc_del {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DEL>;
            mods = <(MOD_LSFT)>;
        };
    };

    //Ctrl V
    behaviors {
        ctrl_v: ctrl_v {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&bhm LALT ENTER>, <&kp V>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
        };
    };
    
 behaviors {
        ctrl_x: ctrl_x {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sl NLAYER>, <&kp X>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
        };
    };

 behaviors {
        mod_f: mod_f {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&bhm LCTL F>, <&kp F>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };
    };
    
 behaviors {
        mod_g: mod_g {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&bhm LC(LS(LALT)) G>, <&kp G>;
            mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT|MOD_LCTL)>;
            keep-mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT|MOD_LCTL)>;
        };
    };

 behaviors {
        mod_d: mod_d {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&bhm LSHFT D>, <&kp D>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };
    };

 behaviors {
        mod_j: mod_j {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&bhm LCTL J>, <&kp J>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };
    };

 behaviors {
        mod_k: mod_k {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&bhm LSHFT K>, <&kp K>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };
    };
    
 behaviors {
        mod_at: mod_at {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&bhm LCTL RA(V)>, <&kp RA(V)>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };
    };

 behaviors {
        mod_und: mod_und {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&bhm LSFT LS(SLASH)>, <&kp LS(SLASH)>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };
    };
    
 

   // Activate ADJUST layer by pressing raise and lower
    //conditional_layers {
    //    compatible = "zmk,conditional-layers";
    //    adjust_layer {
    //        if-layers = <LOWER RAISE>;
    //        then-layer = <ADJUST>;
    //    };
    //}; 

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Base";
            
// ------------------------------------------------------------------------------------------------------------
// |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
// |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
// |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
//               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |
            bindings = <
&kp ESC             &kp N1       &kp N2       &kp N3         &kp N4       &kp N5                            &kp N6          &kp N7      &kp N8    &kp N9    &kp N0     &tog GAMING
&kp TAB             &kp Q        &lt WLAYER W &lt ELAYER E   &kp R        &kp T                             &kp Y           &kp U       &kp I     &kp O     &kp P      &quotation
&lshift LSHFT LSHFT &kp A        &kp S        &mod_d         &mod_f       &mod_g                            &kp H           &mod_j      &mod_k    &kp L     &u_exclam  &kp ENTER
&kp LCTRL           &ctrl_z      &kp X        &kp C          &kp V        &kp B            &kp C_MUTE       &kp N           &kp M       &kp COMMA &kp DOT   &kp FSLH   &kp RSHFT
                       &kp F14      &kp F15    &ctrl_x      &ctrl_c  &ctrl_v                            &kp BSPC        &sl RAISE   &kp F16 &kp F17 &kp F18
                                                                                     &buildr     &kp B  &kp C &kp D  &kp E
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_UP PG_DN>;
        };

        gmng_layer {
            display-name = "Gaming";
// ----------------------------------------------------------------------------------------------------------------------------
// |        |         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |         | |      |      |      |       |      |       |       |
//                    |         |         |         |         |         | |      |      |      |       |      |

            bindings = <
&kp ESC           &kp N1          &kp N2          &kp N3          &kp N4          &kp N5                                            &kp N6          &kp N7          &kp N8          &kp N9          &kp N0          &tog GAMING
&kp TAB           &kp Q           &kp W           &kp E           &kp R           &kp T                                             &kp Y           &kp U           &kp I           &kp O           &kp P           &quotation
&kp LSHFT         &kp A           &kp S           &kp D           &kp F           &kp G                                             &kp H           &kp J           &kp K           &kp L           &u_exclam       &kp ENTER
&kp LCTL          &kp Z           &kp X           &kp C           &kp V           &kp B            &none                            &kp N           &kp M           &kp COMMA       &kp DOT         &kp FSLH        &none
                                  &none            &none            &kp LALT           &kp SPACE   &kp LCTL         &bspc_del       &mo RAISE       &none           &none           &none
                                                                                                                    &kp A      &kp B  &kp C &kp D  &kp E
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        lower_layer {
            display-name = "Space";
// ----------------------------------------------------------------------------------------------------------------------------
// |        |         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |         | |      |      |      |       |      |       |       |
//                    |         |         |         |         |         | |      |      |      |       |      |

            bindings = <
&kp LC(F12)       &kp F1          &kp F2          &kp F3          &kp F4          &kp F5                                            &kp F6          &kp F7          &kp F8          &kp F9          &kp F10         &none
&kp LC(LS(F12))   &kp LG(TAB)     &kp HOME        &kp UP          &kp END         &kp PSCRN                                         &none           &msc SCRL_UP    &mmv MOVE_UP    &msc SCRL_DOWN  &kp F12         &none
&kp LSHFT         &kp LGUI        &kp LEFT        &kp DOWN        &kp RIGHT       &kp LA(F4)                                        &msc SCRL_LEFT  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT &msc SCRL_RIGHT &none
&kp LCTL          &none           &kp LBKT        &kp RBKT        &none           &none            &none                            &none           &none           &none           &none           &none           &none
                                  &none           &none           &none           &none            &none           &mkp MB1         &mkp MB2        &none           &none           &none
                                                                                                                    &kp A      &kp B  &kp C &kp D  &kp E
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        raise_layer {
            display-name = "Symbol";
// ----------------------------------------------------------------------------------------------------------------------------
// |        |         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |         | |      |      |      |       |      |       |       |
//                    |         |         |         |         |         | |      |      |      |       |      |

            bindings = <
&none              &none           &none           &none           &none           &none                                             &none           &none           &none           &none           &none           &none 
&kp RA(N1)         &kp GRAVE       &kp LS(RBKT)    &kp RBKT        &kp LS(COLON)   &kp RA(SEMI)                                      &kp FSLH        &kp HOME        &kp UP          &kp END         &none           &none
&bhm LSHFT RA(X)   &kp GRAVE       &kp MINUS       &mod_und        &mod_at         &kp KP_MULTIPLY                                   &kp N1          &kp LEFT        &kp DOWN        &kp RIGHT       &sl ADJUST      &none
&kp LCTL           &kp RA(COMMA)   &kp RA(W)       &kp FSLH        &kp RA(DOT)     &kp RA(Q)        &none                            &kp LG(DOT)     &kp RA(F)       &kp RA(G)       &none           &none           &none
                                   &kp RA(F)       &kp RA(G)       &kp N1          &kp LS(LBRC)     &kp LS(MINUS)   &kp BACKSPACE    &kp LS(EQUAL)   &none           &none           &none
                                                                                                                    &kp A      &kp B  &kp C &kp D  &kp E
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        adjust_layer {
            display-name = "Symbol+";
// ----------------------------------------------------------------------------------------------------------------------------
// |        |         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |         | |      |      |      |       |      |       |       |
//                    |         |         |         |         |         | |      |      |  =   |       |      |

            bindings = <
&none             &none           &none           &none           &none           &none                                             &none           &none           &none           &none           &none           &none
&none             &none           &kp RA(B)       &kp RA(N)       &kp LS(BSLH)    &kp RA(C)                                         &none           &none           &kp LS(EQUAL)   &none           &none           &none
&none             &kp LS(DOT)     &kp N1          &kp FSLH        &none           &caret                                            &none           &none           &none           &none           &none           &none
&none             &none           &none           &none           &none           &none            &none                            &none           &none           &none           &none           &none           &none
                                  &none           &none           &none           &kp RA(Q)        &none           &none            &none           &none           &none           &none
                                                                                                                    &kp A      &kp B  &kp C &kp D  &kp E
            >;
        };

        w_layer {
            display-name = "W_Layer";
// ----------------------------------------------------------------------------------------------------------------------------
// |        |         |    U    |    U    |    O    |    P    |                  |  BT_CLR |  BT_SEL 0 |  BT_SEL 1 |  BT_SEL 2 |         | NUMLCK |
// |        |         |   DEL   |   DEL   |    H    | LS(SLASH)|                 |         |  KP_N7   |  KP_N8    |  KP_N9    |         |        |
// | LG(TAB)|    N    |  MINUS  |    K    |  BSPC   |    J    |                  |   td1   |  KP_N4   |  KP_N5    |  KP_N6    |         |        |
// |        |         |         | LC(FSLH)| LC(N1)  |    L    |         | |      |   td0   |  KP_N1   |  KP_N2    |  KP_N3    |         |git_macro|
//                    |         |         |  PLUS   |  SPACE  |   DOT   | | BSPC |  KP_N0  |   TAB    |           |           |

            bindings = <
&none             &none           &kp U           &kp U           &kp O           &kp P                                             &bt BT_CLR      &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &none           &kp LNLCK
&none             &none           &kp DEL         &kp DEL         &kp H           &kp LS(SLASH)                                     &none           &kp KP_N7       &kp KP_N8       &kp KP_N9       &none           &none
&kp LG(TAB)       &kp N           &kp MINUS       &kp K           &kp BSPC        &kp J                                             &td1            &kp KP_N4       &kp KP_N5       &kp KP_N6       &none           &none
&none             &none           &none           &kp LC(FSLH)    &kp LC(N1)      &kp L            &none                            &td0            &kp KP_N1       &kp KP_N2       &kp KP_N3       &none           &none
                                  &none           &none           &kp PLUS        &kp SPACE        &kp DOT         &kp BSPC         &kp KP_N0       &kp TAB         &none           &none
                                                                                                                    &kp A      &kp B  &kp C &kp D  &kp E
            >;
        };
        
        e_layer {
            display-name = "E_Layer";
// ----------------------------------------------------------------------------------------------------------------------------
// |        |         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |         | |      |      |      |       |      |       |       |
//                    |         |         |         |         |         | |      |      |      |       |      |clo

            bindings = <
&none             &none           &none            &none            &bt BT_SEL 0      &bt BT_SEL 1                                        &none           &none           &none           &none           &none           &none
&none             &none           &kp LC(LG(LEFT)) &none            &kp LC(LG(RIGHT)) &kp LC(Z)                                           &none           &none           &none           &none           &none           &none
&kp LG(TAB)       &kp LC(F)       &kp LG(LS(LEFT)) &none            &kp LG(LS(RIGHT)) &kp LC(Y)                                           &none           &none           &none           &none           &none           &none
&none             &none           &none            &none            &none             &kp LG(UP)    &none                                 &none           &none           &none           &none           &none           &none
                                  &none            &none            &kp C_NEXT        &kp LS(LC(LA(DOT)))          &kp LS(LC(LA(COMMA)))      &bt BT_SEL 0     &bt BT_SEL 1    &none           &none           &none
                                                                                                                    &kp A      &kp B  &kp C &kp D  &kp E
            >;
        };

        num_layer {
            display-name = "Numbers";
// ----------------------------------------------------------------------------------------------------------------------------
// |        |         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |         | |      |      |      |       |      |       |       |
//                    |         |         |         |         |         | |      |      |      |       |      |

            bindings = <
&buildl           &none           &none          &none           &none         &none                                             &bt BT_CLR      &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &none           &kp KP_NUM
&none             &none           &kp KP_PLUS    &kp KP_MULTIPLY &kp KP_DIVIDE &kp MINUS                                         &none           &kp KP_N7       &kp KP_N8       &kp KP_N9       &none           &none
&none             &kp TAB         &kp KP_MINUS   &kp DOT         &kp SPACE     &kp LS(DOT)                                       &td1            &kp KP_N4       &kp KP_N5       &kp KP_N6       &none           &none
&none             &none           &none          &kp COMMA       &none         &none            &none                            &td0            &kp KP_N1       &kp KP_N2       &kp KP_N3       &none           &none
                                  &none           &none          &none         &none            &kp DOT         &kp BSPC         &kp KP_N0       &kp TAB         &buildr         &bootloader
                                                                                                                    &kp A      &kp B  &kp C &kp D  &kp E
            >;
        };

        macro_layer {
            display-name = "Macro";
// ----------------------------------------------------------------------------------------------------------------------------
// |        |         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |         | |      |      |      |       |      |       |       |
//                    |         |         |         |         |         | |      |      |      |       |      |

            bindings = <
&none             &none           &none          &none           &none         &none                                             &none      &none     &none     &none      &none        &none
&none             &m_speed1       &m_speed2      &m_speed3       &m_del5       &kp LS(GRAVE)                                     &none      &none     &none     &none      &none        &none
&none             &none           &none          &m_mute         &none         &none                                             &none      &none     &none     &none      &none        &none
&none             &none           &none          &none           &none         &cstest          &none                            &none      &none     &none     &none      &none        &none
                                  &none          &none           &none         &none            &none           &none            &none      &none     &none     &none
                                                                                                                    &kp A      &kp B  &kp C &kp D  &kp E
            >;
        };
    };
};
